/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body for HX711 setup and displaying weight in grams.
  ******************************************************************************
  * @attention
  *
  * This program initializes the HX711 load cell amplifier, performs a basic
  * tare and calibration (placeholders), and then continuously reads the
  * weight in grams. The weight is printed to UART for debugging.
  *
  * This version is designed to be compatible with a TouchGFX project,
  * meaning direct display drawing functions (like Displ_CString) are avoided
  * as they typically conflict with TouchGFX's rendering pipeline.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h" // Includes stm32l4xx_hal.h and your custom headers like hx711.h, z_displ_ILI9XXX.h, fonts.h
#include "app_touchgfx.h" // For TouchGFX initialization and processing



/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
// HAL Peripheral Handles (as generated by CubeMX)
extern CRC_HandleTypeDef hcrc;
extern SPI_HandleTypeDef hspi1;
extern DMA_HandleTypeDef hdma_spi1_tx;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3; // Assuming this is TGFX_T for TouchGFX tick
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim15;
extern UART_HandleTypeDef huart2; // Assuming you have a huart2 handle for USART2

// HX711 driver instance
hx711_t my_scale;

// Display dimensions (declared extern in z_displ_ILI9XXX.h, defined in z_displ_ILI9XXX.c)
extern int16_t _width;
extern int16_t _height;

// Declare the TIM_HandleTypeDef for TouchGFX tick timer if it's not htim3
extern TIM_HandleTypeDef TGFX_T; // This should be defined in tim.c if configured in CubeMX

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
// Explicitly declare prototypes for CubeMX-generated initialization functions.
void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_DMA_Init(void);
void MX_SPI1_Init(void);
void MX_TIM2_Init(void);
void MX_CRC_Init(void);
void MX_TIM3_Init(void);
void MX_TIM4_Init(void);
void MX_TIM15_Init(void);
void MX_USART2_UART_Init(void); // Prototype for UART initialization

// TouchGFX initialization and process function prototypes
void MX_TouchGFX_Init(void);
void MX_TouchGFX_Process(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// --- IMPORTANT: Redirection for printf ---
// If you want to see printf output on your serial terminal, you MUST
// implement the _write function, typically in syscalls.c.
// Ensure your syscalls.c file is part of your project's build.
// Example (uncomment and ensure huart2 is initialized):
// int _write(int file, char *ptr, int len)
// {
//   HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
//   return len;
// }

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  MX_CRC_Init();
  MX_TIM3_Init(); // Initialize TIM3 for TouchGFX tick
  MX_TIM4_Init();
  MX_TIM15_Init();
  MX_USART2_UART_Init(); // Initialize UART for serial debugging

  // --- Display Initialization ---
  // Displ_Init sets _width and _height based on orientation.
  Displ_Init(Displ_Orientat_0);
  Displ_BackLight('I'); // Initialize backlight
  Displ_BackLight('F'); // Set backlight to full brightness

  // Start the TouchGFX tick timer
  HAL_TIM_Base_Start_IT(&TGFX_T);

  // Initialize TouchGFX framework
  MX_TouchGFX_Init();

  /* USER CODE BEGIN 2 */

  printf("System Initialized.\r\n");

  // --- HX711 Initialization ---
  printf("Initializing HX711...\r\n");
  HAL_Delay(500); // Short delay

  // Initialize the HX711 driver with the GPIO pins configured in CubeMX
  hx711_init(&my_scale, HX711_SCK_GPIO_Port, HX711_SCK_Pin, HX711_DOUT_GPIO_Port, HX711_DOUT_Pin);

  // --- HX711 Calibration (Placeholders) ---
  // IMPORTANT: You MUST perform actual calibration for accurate readings.
  // 1. Tare the scale (with no load)
  printf("Taring HX711 (no load)...\r\n");
  HAL_Delay(1000); // Wait for scale to settle
  hx711_tare(&my_scale, 20); // Tare by averaging 20 readings
  printf("Tare complete. Offset: %ld\r\n", hx711_get_offset(&my_scale));
  HAL_Delay(1000);

  // 2. Set the calibration coefficient
  //    To find this:
  //    a. Place a known weight (e.g., 100 grams) on the scale after taring.
  //    b. Read the raw value: `int32_t raw_for_known_weight = hx711_average_value(&my_scale, 20);`
  //    c. Calculate coef: `float actual_coef = (float)(raw_for_known_weight - hx711_get_offset(&my_scale)) / KNOWN_WEIGHT_IN_GRAMS;`
  //    d. Replace the placeholder below with `hx711_set_coef(&my_scale, actual_coef);`
  //    Example placeholder: 20000.0f raw units per gram (adjust based on your load cell and gain)
  printf("Setting HX711 calibration coefficient...\r\n");
  hx711_set_coef(&my_scale, 20000.0f); // Placeholder: Adjust this value after calibration!
  printf("Coefficient set: %.2f\r\n", hx711_get_coef(&my_scale));
  HAL_Delay(1000);

  printf("HX711 Ready. Reading weight in grams.\r\n");
  HAL_Delay(1000);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char display_str[50]; // Buffer to hold the string for UART output
  float weight_grams;   // Variable to store the weight in grams

  while (1)
  {
    /* USER CODE END WHILE */

    // Read the current weight in grams
    weight_grams = hx711_weight(&my_scale, 5); // Average 5 readings for stability

    // Print the weight to UART for debugging.
    sprintf(display_str, "Weight: %.2f g\r\n", weight_grams);
    printf("%s", display_str);

    // IMPORTANT: For displaying on the LCD with TouchGFX, you would typically
    // update a TouchGFX widget (e.g., a TextArea or Label) here.
    // Example (conceptual, requires TouchGFX setup):
    // myScreen.updateWeightText(weight_grams);
    // You would define a function in your TouchGFX screen class to update a text widget.

    HAL_Delay(500); // Delay for 500ms before next reading and update.
                    // Adjust this delay based on how frequently you need updates.

    // Process TouchGFX events and rendering
    MX_TouchGFX_Process();

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  * where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
