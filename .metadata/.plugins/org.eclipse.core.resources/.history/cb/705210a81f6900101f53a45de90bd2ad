/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "app_touchgfx.h"


CRC_HandleTypeDef hcrc;
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim15;
hx711_t my_scale;

int16_t _width;       								///< (oriented) display width
int16_t _height;      								///< (oriented) display height

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  MX_CRC_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM15_Init();
  Displ_Init(Displ_Orientat_0);       // Initialize display controller. Adjust orientation (0, 90, 180, 270) as needed for your UI design.
  Displ_BackLight('I');               // Initialize backlight. 'I' for Init, sets to BKLIT_INIT_LEVEL
  Displ_BackLight('F');
  HAL_TIM_Base_Start_IT(&TGFX_T);
//  MX_TouchGFX_Init();

  Displ_CString(0, _height / 2 - 40, _width, _height / 2, "Initializing HX711...", Font20, 1, WHITE, BLACK);
  printf("Initializing HX711...\r\n");
  HAL_Delay(1000); // Short delay

  while (1)
  {
    /* USER CODE END WHILE */

//  MX_TouchGFX_Process();
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }

}
#ifdef USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif /* USE_FULL_ASSERT */
