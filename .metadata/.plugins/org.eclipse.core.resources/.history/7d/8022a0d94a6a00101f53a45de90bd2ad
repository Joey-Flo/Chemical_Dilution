/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "app_touchgfx.h"


CRC_HandleTypeDef hcrc;
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim15;
hx711_t my_scale;

extern int16_t _width;       								///< (oriented) display width
extern int16_t _height;      								///< (oriented) display height

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  MX_CRC_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM15_Init();
  Displ_Init(Displ_Orientat_0);       // Initialize display controller. Adjust orientation (0, 90, 180, 270) as needed for your UI design.
  Displ_BackLight('I');               // Initialize backlight. 'I' for Init, sets to BKLIT_INIT_LEVEL
  Displ_BackLight('F');
//
//  // --- HX711 Initialization ---
//  Displ_CString(0, _height / 2 - 40, _width, _height / 2, "Initializing HX711...", Font20, 1, WHITE, BLACK);
//  printf("Initializing HX711...\r\n");
//  HAL_Delay(1000); // Short delay
//
//  // Initialize the HX711 driver with the GPIO pins configured in CubeMX
//  // Ensure HX711_SCK_GPIO_Port, HX711_SCK_Pin, etc., match your CubeMX user labels.
  hx711_init(&my_scale, HX711_SCK_GPIO_Port, HX711_SCK_Pin, HX711_DOUT_GPIO_Port, HX711_DOUT_Pin);
//
//  // --- Prepare for Raw Data Reading ---
//  Displ_CLS(BLACK); // Clear screen for raw data display
//  Displ_CString(0, _height / 2 - 20, _width, _height / 2 + 20, "Reading Raw HX711 Data...", Font20, 1, YELLOW, BLACK);
//  printf("HX711 Initialized. Reading raw data.\r\n");
//  HAL_Delay(1500);
//
//  /* USER CODE END 2 */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
  char display_str[50]; // Buffer to hold the string for LCD display
  int32_t raw_value;    // Variable to store the raw HX711 reading
//
//  HAL_TIM_Base_Start_IT(&TGFX_T);
////  MX_TouchGFX_Init();
//
//  Displ_CString(0, _height / 2 - 40, _width, _height / 2, "Initializing HX711...", Font20, 1, WHITE, BLACK);
//  printf("Initializing HX711...\r\n");
//  HAL_Delay(1000); // Short delay


  // --- Start TIM4 PWM ---
   // This is the crucial step to enable the PWM output on the pin (PB6 for TIM4_CH1)
   if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
   {
       Error_Handler(); // Handle error if PWM fails to start
   }

//   for (int i = 0; i < 5; i++){
//	   SwipeDutyCycle(&htim4, TIM_CHANNEL_1, 7);;
//   }

  while (1)
  {
	  WeightTest(8488000, 8550000, &htim4, TIM_CHANNEL_1);
    /* USER CODE END WHILE */
//	    raw_value = hx711_value(&my_scale);
//
//	    // Print the raw value to UART for detailed debugging.
//	    // This output will appear in your serial terminal.
//	    printf("Raw HX711 Value: %ld\r\n", raw_value);
//
//	    // Convert the raw value (integer) to a string for display on the LCD.
//	    sprintf(display_str, "Raw: %ld", raw_value);
//
//	     //Display the raw value on your LCD.
//	     //Displ_CString draws the text and fills its background area, preventing flicker.
//	    Displ_CString(0, _height / 2 - 20, _width, _height / 2 + 20, display_str, Font20, 1, WHITE, BLACK);
//
//	    HAL_Delay(200); // Delay for 200ms before next reading and update.
//  MX_TouchGFX_Process();
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }

}
#ifdef USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif /* USE_FULL_ASSERT */
