#include <gui/pumpsetupscreen_screen/PumpSetupScreenView.hpp>
#include <gui/common/CustomKeyboard.hpp>
#include "device_config.h"
#include <cstdio>
#include <cstdlib>
#include <cstring>

// This external variable allows the UI code to access the main device configuration data.
extern DeviceConfiguration_t myDeviceConfig;


// The constructor uses a C++ member initializer list to set up the widget arrays.
PumpSetupScreenView::PumpSetupScreenView() :
    // --- THIS IS THE CORRECTED INITIALIZER LIST ---
    // The array is now initialized with the addresses of the actual ToggleButton WIDGETS.
    pumpToggleButtons { &toggleButton1, &toggleButton2, &toggleButton3, &toggleButton4,
                       &toggleButton5, &toggleButton6, &toggleButton7, &toggleButton8},

    densityTextAreas  { &PumpDensity_1, &PumpDensity_2, &PumpDensity_3, &PumpDensity_4,
                       &PumpDensity_5, &PumpDensity_6, &PumpDensity_7, &PumpDensity_8 },

    densityBuffers    { PumpDensity_1Buffer, PumpDensity_2Buffer, PumpDensity_3Buffer, PumpDensity_4Buffer,
                       PumpDensity_5Buffer, PumpDensity_6Buffer, PumpDensity_7Buffer, PumpDensity_8Buffer },

    densityBufferSizes{ PUMPDENSITY_1_SIZE, PUMPDENSITY_2_SIZE, PUMPDENSITY_3_SIZE, PUMPDENSITY_4_SIZE,
                       PUMPDENSITY_5_SIZE, PUMPDENSITY_6_SIZE, PUMPDENSITY_7_SIZE, PUMPDENSITY_8_SIZE }
{
    // The constructor body only contains one-time setup that won't change.
    keyboard.setPosition(0, 115, 240, 180);
    add(keyboard);
    keyboard.setVisible(false);
}


// This function runs every time the screen is displayed.
void PumpSetupScreenView::setupScreen()
{
    PumpSetupScreenViewBase::setupScreen();

    // Reset keyboard flags every time the screen is entered.
    for (int i = 0; i < NUM_PUMPS; ++i) {
        KeyboardCallFlags[i] = 0;
    }

    // Loop 1: Set the initial state for all toggle buttons from the config data.
    // This now works because the pumpToggleButtons array is correctly initialized.
    for (int i = 0; i < NUM_PUMPS; ++i)
    {
        bool is_enabled = (myDeviceConfig.PumpEnable[i] == 1);
        pumpToggleButtons[i]->forceState(is_enabled);
        pumpToggleButtons[i]->invalidate();
    }

    // Loop 2: Set the initial text for all density fields from the config data.
    char tempBuffer[10];
    for (int i = 0; i < NUM_PUMPS; ++i)
    {
        snprintf(tempBuffer, 10, "%.2f", myDeviceConfig.PumpDensity[i]);
        Unicode::strncpy(densityBuffers[i], tempBuffer, densityBufferSizes[i]);
        densityTextAreas[i]->invalidate();
    }
}


void PumpSetupScreenView::tearDownScreen()
{
    PumpSetupScreenViewBase::tearDownScreen();
}


void PumpSetupScreenView::HandleKeyboard(int8_t index) {
    keyboard.setVisible(true);
    keyboard.invalidate();
    KeyboardExtras.setVisible(true);
    KeyboardExtras.invalidate();

    for (int i = 0; i < NUM_PUMPS; i++) {
        KeyboardCallFlags[i] = (i == (index - 1)) ? 1 : 0;
    }
}


void HandleKeyboard(int8_t index){
    keyboard.setVisible(true);
    keyboard.invalidate();
    KeyboardExtras.setVisible(true);
    KeyboardExtras.invalidate();

    for (int i = 0; i < NUM_PUMPS; i++) {
        KeyboardCallFlags[i] = (i == (index - 1)) ? 1 : 0;
    }
}



void PumpSetupScreenView::EnterPressed()
{
    // The View's job is simple: manage UI elements and report events.

    // 1. Hide the keyboard.
    keyboard.setVisible(false);
    keyboard.invalidate();
    KeyboardExtras.setVisible(false);
    KeyboardExtras.invalidate();

    // 2. Find which text field was active.
    for (int i = 0; i < NUM_PUMPS; ++i)
    {
        if (KeyboardCallFlags[i] == 1)
        {
            // 3. Convert the keyboard buffer to a standard C-string.
            char utf8_buffer[20];
            memset(utf8_buffer, 0, 20);
            Unicode::toUTF8(keyboard.getBuffer(), (uint8_t*)utf8_buffer, 20);

            // 4. Report the event to the Presenter and let it handle all the logic.
            // Pass the 1-based index and the text from the keyboard.
            presenter->newDensityEntered(i + 1, utf8_buffer);

            // 5. Reset the local state and we're done.
            KeyboardCallFlags[i] = 0;
            keyboard.clearBuffer();

            break; // Stop the loop since we found the active field.
        }
    }
}


void PumpSetupScreenView::ExitPressed()
{
    keyboard.setVisible(false);
    keyboard.invalidate();
    KeyboardExtras.setVisible(false);
    KeyboardExtras.invalidate();
    keyboard.clearBuffer();
}
