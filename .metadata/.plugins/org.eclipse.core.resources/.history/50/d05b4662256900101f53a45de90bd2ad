/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "app_touchgfx.h"

// Define constants used in WeightPWM function (these would typically be in main.h)
// HX711 Raw Value Range (from user input)
#define HX711_MIN_RAW_VALUE 8483500.0f // Raw value when not pressed
#define HX711_MAX_RAW_VALUE 8610000.0f // Raw value when fully pressed

// PWM Output Range
#define PWM_MIN_FREQ_HZ     400.0f   // Minimum frequency (at min pressure)
#define PWM_MAX_FREQ_HZ     1500.0f  // Maximum frequency (at max pressure)
#define PWM_MIN_DUTY_CYCLE  5.0f     // Minimum duty cycle (5%)
#define PWM_MAX_DUTY_CYCLE  100.0f   // Maximum duty cycle (100%)

// Fixed Prescaler for TIM4 (from MX_TIM4_Init)
#define TIM4_FIXED_PRESCALER 79 // (Prescaler + 1 = 80)

CRC_HandleTypeDef hcrc;
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim15;
hx711_t my_scale;

extern volatile float current_weight_grams_global;

uint32_t get_tim_clock_freq(TIM_HandleTypeDef* htim);
void WeightPWM(void);


extern int16_t _width;       								///< (oriented) display width
extern int16_t _height;      								///< (oriented) display height

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  MX_CRC_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM15_Init();
  Displ_Init(Displ_Orientat_0);       // Initialize display controller. Adjust orientation (0, 90, 180, 270) as needed for your UI design.
  Displ_BackLight('I');               // Initialize backlight. 'I' for Init, sets to BKLIT_INIT_LEVEL
  Displ_BackLight('F');

  // --- HX711 Initialization ---
  Displ_CString(0, _height / 2 - 40, _width, _height / 2, "Initializing HX711...", Font20, 1, WHITE, BLACK);
  printf("Initializing HX711...\r\n");
  HAL_Delay(1000); // Short delay

  // Initialize the HX711 driver with the GPIO pins configured in CubeMX
  // Ensure HX711_SCK_GPIO_Port, HX711_SCK_Pin, etc., match your CubeMX user labels.
  hx711_init(&my_scale, HX711_SCK_GPIO_Port, HX711_SCK_Pin, HX711_DOUT_GPIO_Port, HX711_DOUT_Pin);

  // --- Prepare for Raw Data Reading ---
  Displ_CLS(BLACK); // Clear screen for raw data display
  Displ_CString(0, _height / 2 - 20, _width, _height / 2 + 20, "Reading Raw HX711 Data...", Font20, 1, YELLOW, BLACK);
  printf("HX711 Initialized. Reading raw data.\r\n");
  HAL_Delay(1500);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char display_str[50]; // Buffer to hold the string for LCD display
  int32_t raw_value;    // Variable to store the raw HX711 reading

  HAL_TIM_Base_Start_IT(&TGFX_T);
//  MX_TouchGFX_Init();

  Displ_CString(0, _height / 2 - 40, _width, _height / 2, "Initializing HX711...", Font20, 1, WHITE, BLACK);
  printf("Initializing HX711...\r\n");
  HAL_Delay(1000); // Short delay

  while (1)
  {
    /* USER CODE END WHILE */
	    raw_value = hx711_value(&my_scale);

	    // Print the raw value to UART for detailed debugging.
	    // This output will appear in your serial terminal.
	    printf("Raw HX711 Value: %ld\r\n", raw_value);

	    // Convert the raw value (integer) to a string for display on the LCD.
	    sprintf(display_str, "Raw: %ld", raw_value);

	    // Display the raw value on your LCD.
	    // Displ_CString draws the text and fills its background area, preventing flicker.
	    Displ_CString(0, _height / 2 - 20, _width, _height / 2 + 20, display_str, Font20, 1, WHITE, BLACK);

	    HAL_Delay(200); // Delay for 200ms before next reading and update.
//  MX_TouchGFX_Process();
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


uint32_t get_tim_clock_freq(TIM_HandleTypeDef* htim) {
    uint32_t pclk_freq;
    // Determine which APB bus the timer is on (TIM4 is on APB1)
    if (htim->Instance == TIM2 || htim->Instance == TIM3 || htim->Instance == TIM4 || htim->Instance == TIM5 ||
        htim->Instance == TIM6 || htim->Instance == TIM7 || htim->Instance == LPTIM1) {
        pclk_freq = HAL_RCC_GetPCLK1Freq();
        // If APB1 prescaler is not 1, the timer clock is PCLK1 * 2
        if (__HAL_RCC_GET_APB1_PRESALER() != RCC_HCLK_DIV1) {
            return pclk_freq * 2;
        }
    } else { // Assume APB2 for other timers (TIM1, TIM8, TIM15, TIM16, TIM17)
        pclk_freq = HAL_RCC_GetPCLK2Freq();
        // If APB2 prescaler is not 1, the timer clock is PCLK2 * 2
        if (__HAL_RCC_GET_APB2_PRESALER() != RCC_HCLK_DIV1) {
            return pclk_freq * 2;
        }
    }
    return pclk_freq;
}

/**
  * @brief  Reads HX711, calculates weight, and controls PWM.
  * This function should be called periodically (e.g., in the main loop).
  * It updates a global variable with the current weight and adjusts TIM4 PWM.
  * @param  None
  * @retval None
  */
void WeightPWM(void)
{
    int32_t raw_value;
    float normalized_pressure;
    float target_freq_hz;
    float target_dc_percent;
    // timer_clock_freq can be declared static or global if it doesn't change
    // after system initialization to avoid recalculating every call.
    static uint32_t timer_clock_freq = 0;
    if (timer_clock_freq == 0) { // Calculate once
        timer_clock_freq = get_tim_clock_freq(&htim4);
    }

    uint32_t new_period;
    uint32_t new_pulse;

    // 1. Read raw HX711 value
    raw_value = hx711_value(&my_scale);

    // 2. Normalize raw value to a 0.0f to 1.0f range
    normalized_pressure = (float)(raw_value - HX711_MIN_RAW_VALUE) / (HX711_MAX_RAW_VALUE - HX711_MIN_RAW_VALUE);

    // Clamp the normalized value to ensure it stays within 0.0f and 1.0f
    if (normalized_pressure < 0.0f) {
        normalized_pressure = 0.0f;
    } else if (normalized_pressure > 1.0f) {
        normalized_pressure = 1.0f;
    }

    // 3. Calculate target frequency and duty cycle based on normalized pressure
    target_freq_hz = PWM_MIN_FREQ_HZ + normalized_pressure * (PWM_MAX_FREQ_HZ - PWM_MIN_FREQ_HZ);
    target_dc_percent = PWM_MIN_DUTY_CYCLE + normalized_pressure * (PWM_MAX_DUTY_CYCLE - PWM_MIN_DUTY_CYCLE);

    // 4. Calculate new Period (ARR) for the target frequency
    // Period = (Timer_Clock / ((Prescaler + 1) * Frequency)) - 1
    // Using TIM4_FIXED_PRESCALER = 79, so (Prescaler + 1) = 80
    if (target_freq_hz > 0) { // Avoid division by zero
        new_period = (uint32_t)(((float)timer_clock_freq / ((float)(TIM4_FIXED_PRESCALER + 1) * target_freq_hz)) - 1.0f);
    } else {
        new_period = 0; // Or a minimum period to effectively stop/minimize PWM
    }

    // Ensure period is at least 1 for valid PWM operation
    if (new_period < 1) {
        new_period = 1;
    }

    // 5. Calculate new Pulse (CCR1) for the target duty cycle
    // Pulse = Duty_Cycle_Percentage / 100.0f * (Period + 1)
    new_pulse = (uint32_t)((target_dc_percent / 100.0f) * (new_period + 1.0f));

    // Clamp pulse to ensure it doesn't exceed Period + 1
    if (new_pulse > (new_period + 1)) {
        new_pulse = (new_period + 1);
    }

    // 6. Update TIM4 registers
    __HAL_TIM_SET_AUTORELOAD(&htim4, new_period);
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, new_pulse);

    // Update the global variable that TouchGFX can read for display
    current_weight_grams_global = hx711_weight(&my_scale, 1); // Read weight in grams for display

    // Removed all printf and sprintf calls
    HAL_Delay(100); // Small delay before next reading and update. Adjust as needed.
}


void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }

}
#ifdef USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif /* USE_FULL_ASSERT */
